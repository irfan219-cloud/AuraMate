'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Mic, Home, Smile, Frown, Meh } from 'lucide-react';
import Link from 'next/link';
import FloatingOrbs from '@/components/FloatingOrbs';
import InspiringQuote from '@/components/InspiringQuote';

type Message = {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  emotion?: 'happy' | 'sad' | 'neutral';
};

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hi there ðŸ’« I'm AuraMate. How are you feeling today?",
      sender: 'ai',
    }
  ]);
  const [input, setInput] = useState('');
  const [isListening, setIsListening] = useState(false);

  const detectEmotion = (text: string): 'happy' | 'sad' | 'neutral' => {
    const happyWords = ['happy', 'great', 'good', 'amazing', 'wonderful', 'excited', 'love'];
    const sadWords = ['sad', 'tired', 'stressed', 'anxious', 'worried', 'down', 'bad'];
    
    const lowerText = text.toLowerCase();
    if (happyWords.some(word => lowerText.includes(word))) return 'happy';
    if (sadWords.some(word => lowerText.includes(word))) return 'sad';
    return 'neutral';
  };

  const getAIResponse = (userEmotion: string, userText: string): string => {
    if (userEmotion === 'sad') {
      return "I can sense you're going through something tough right now. Remember, it's okay to feel this way. Would you like me to suggest a calming playlist or a quick breathing exercise? ðŸŒ¸";
    } else if (userEmotion === 'happy') {
      return "Your positive energy is beautiful! âœ¨ I'm so glad you're feeling good. Keep riding this wave of happiness!";
    }
    return "I'm here with you. Tell me more about what's on your mind. ðŸ’­";
  };

  const handleSend = () => {
    if (!input.trim()) return;

    const emotion = detectEmotion(input);
    const userMessage: Message = {
      id: Date.now().toString(),
      text: input,
      sender: 'user',
      emotion,
    };

    setMessages(prev => [...prev, userMessage]);

    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: getAIResponse(emotion, input),
        sender: 'ai',
      };
      setMessages(prev => [...prev, aiMessage]);
    }, 1000);

    setInput('');
  };

  const toggleVoice = () => {
    setIsListening(!isListening);
    // Voice recording logic would go here
  };

  return (
    <main className="relative min-h-screen">
      <FloatingOrbs />
      
      <div className="relative z-10 container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="glass-effect p-3 rounded-full"
            >
              <Home className="w-5 h-5" />
            </motion.button>
          </Link>
          
          <h1 className="text-2xl font-semibold gradient-text">Chat with AuraMate</h1>
          
          <div className="w-11" /> {/* Spacer */}
        </div>

        {/* Inspiring Quote */}
        <div className="mb-6">
          <InspiringQuote />
        </div>

        {/* Chat Container */}
        <div className="glass-effect rounded-3xl p-6 mb-6 h-[50vh] overflow-y-auto">
          <AnimatePresence>
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0 }}
                className={`mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-[70%] ${
                  message.sender === 'user' 
                    ? 'bg-gradient-to-r from-purple-400 to-pink-400 text-white' 
                    : 'bg-white/60'
                } rounded-2xl px-5 py-3 shadow-lg`}>
                  {message.sender === 'user' && message.emotion && (
                    <div className="flex items-center gap-2 mb-1 text-xs opacity-80">
                      {message.emotion === 'happy' && <Smile className="w-4 h-4" />}
                      {message.emotion === 'sad' && <Frown className="w-4 h-4" />}
                      {message.emotion === 'neutral' && <Meh className="w-4 h-4" />}
                      <span>Detected: {message.emotion}</span>
                    </div>
                  )}
                  <p className="leading-relaxed">{message.text}</p>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>

        {/* Input Area */}
        <div className="glass-effect rounded-full p-2 flex items-center gap-2">
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={toggleVoice}
            className={`p-3 rounded-full transition-colors ${
              isListening 
                ? 'bg-red-400 text-white animate-pulse' 
                : 'bg-gradient-to-r from-purple-400 to-pink-400 text-white'
            }`}
          >
            <Mic className="w-5 h-5" />
          </motion.button>
          
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="Share how you're feeling..."
            className="flex-1 bg-transparent outline-none px-4 text-gray-800 placeholder-gray-500"
          />
          
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={handleSend}
            className="p-3 rounded-full bg-gradient-to-r from-blue-400 to-teal-400 text-white"
          >
            <Send className="w-5 h-5" />
          </motion.button>
        </div>
      </div>
    </main>
  );
}
